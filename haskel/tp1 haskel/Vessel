module Vessel ( Vessel, newV, freeCellsV, loadV, unloadV, netV )
 where

import Container
import Stack
import Route

data Vessel = Ves [ Stack ] Route deriving (Eq, Show)

newV :: Int -> Int -> Route -> Vessel  -- construye un barco según una cnatida de bahias, la altura de las mismas y una ruta
newV cantidad altura ruta | cantidad > -1 && altura > -1 && not (null altura) = Ves (take cantidad (repeat (newS altura))) ruta


freeCellsV :: Vessel -> Int            -- responde la celdas disponibles en el barco
freeCellsV (Ves stacks _) 
    | length stacks <= 0 = 0
    | otherwise = sum (map freeCellsS stacks)

loadV :: Vessel -> Container -> Vessel -- carga un contenedor en el barco
loadV (V ss r) c = V (update ss r c) r
    where
        update [] _ _ = []
        update (s:ss) r c | freeCellsS s > 0 && holdsS s c r = (stackS s c):ss
        update (s:ss) r c | otherwise = s:(update ss r c)
        update [] _ _ = []
    |


update :: [Stack] -> Route -> Container -> [Stack]  --funcion auxiliar de loadV
update[stack] r c
    (x:ss) r c | holdsS x r c = (stackS x c):ss
    (x:ss) r c | otherwise = x:(update ss r c)
    [] r c = []

unloadV :: Vessel -> String -> Vessel  -- responde un barco al que se le han descargado los contenedores que podían descargarse en la ciudad
netV :: Vessel -> Int                  -- responde el peso neto en toneladas de los contenedores en el barco
